let
    // ---------- Configuración ----------
    apiKey   = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6IndpaGNjY3Zyd3NpZW1zaWRkYXZzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA3MDA0OTYsImV4cCI6MjA2NjI3NjQ5Nn0.uttolu1w4Rp64ACVGFiYSQjuXcCpfDOhGHlkJNZCZks",
    host     = "https://wihcccvrwsiemsiddavs.supabase.co",
    table    = "clientes",
    pageSize = 1000,

    headers = [
        #"apikey"        = apiKey,
        #"Authorization" = "Bearer " & apiKey,
        #"Accept"        = "application/json"
    ],

    // ---------- Función que devuelve UNA página ----------
    GetPage = (offset as number) as list =>
        let
            raw = Web.Contents(
                    host,
                    [
                        RelativePath         = "rest/v1/" & table,
                        Query                = [ select = "*"
                                               , limit  = Text.From(pageSize)
                                               , offset = Text.From(offset) ],
                        Headers              = headers,
                        ManualStatusHandling = {416}          // capturamos “Range Not Satisfiable”
                    ]),
            parsed =
                if Value.Metadata(raw)[Response.Status] = 416
                then {}                                   // página vacía si 416
                else Json.Document(raw)                   // lista de registros
        in
            parsed,

    // ---------- Bucle List.Generate sin saltos ----------
    Pages =
        List.Generate(
            ()  => [offset = 0,                       page = GetPage(0)],
            each not List.IsEmpty([page]),            // parar cuando la página venga vacía
            each 
                let
                    newOffset = [offset] + pageSize,
                    newPage   = GetPage(newOffset)
                in
                    [offset = newOffset, page = newPage],
            each [page]
        ),

    // ---------- Combinar todas las páginas ----------
    allTables = List.Transform(Pages, each Table.FromRecords(_)),
    allData   = if List.Count(allTables) > 0
                then Table.Combine(allTables)
                else #table({}, {})
in
    allData